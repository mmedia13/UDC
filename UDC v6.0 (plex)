#!/bin/bash
#v6.0 plex
# Set log file paths
LOGFILE="/home/logs/UDC/UpdateNClean.log-$(date +%m.%d.%y)"
LOGFILE2="/home/logs/rkhunter/RKhunter.log-$(date +%m.%d.%y)"
LOGFILE3="/home/logs/clamav/ClamAV.log-$(date +%m.%d.%y)"
ERRORLOG="/home/logs/UDC/UDC-ERRORS/UDC-ERROR-Log-$(date +%m.%d.%y_%H.%M.%S)"

# Function to log errors
log_error() {
    echo "[ERROR] $(date "+%T"): $1" >> "$ERRORLOG"
}

# Function to check exit status of the previous command
check_exit_status() {
    if [ $? -eq 0 ]; then
        echo
        echo "          ^ Process Completed ^" >> "$LOGFILE"
        echo
    else
        echo
        echo "          ^ [ERROR] Process Failed! ^" >> "$LOGFILE"
        log_error "Process failed!"
        echo
    fi
}

# Function to perform housekeeping tasks
housekeeping() {
    echo
    echo "$(date "+%m/%d/%Y @ %T") : CLEANING" >> "$LOGFILE"
    echo "*--------------------------------------*"
    echo "*                                      *"
    echo "*            HOUSEKEEPING!            *"
    echo "*                                      *"
    echo "*--------------------------------------*"
    echo
    echo "** Clean up Kernels **"
    echo "$(date "+%T") : - Purge old kernels and remove old kernel packages" >> "$LOGFILE" 2>&1

    # Purge old kernels and remove old kernel packages
    KEEP=2  # Number of kernels to keep
    APT_OPTS=  # Additional options for apt
    while [ ! -z "$1" ]; do
        case "$1" in
            --keep)
                # User specified the number of kernels to keep
                KEEP="$2"
                shift 2
                ;;
            *)
                APT_OPTS="$APT_OPTS $1"
                shift 1
                ;;
        esac
    done

    # Build the list of kernel packages to purge
    CANDIDATES=$(ls -tr /boot/vmlinuz-* | head -n -$KEEP | grep -v "$(uname -r)$" | cut -d- -f2- | awk '{print "linux-image-" $0 " linux-headers-" $0}')
    PURGE=""
    for c in $CANDIDATES; do
        dpkg-query -s "$c" >/dev/null 2>&1 && PURGE="$PURGE $c"
        check_exit_status
    done

    if [ -z "$PURGE" ]; then
        echo "$(date "+%T") : - No kernels are eligible for removal" >> "$LOGFILE" 2>&1
        echo "No kernels are eligible for removal"
        check_exit_status
    fi

    sudo apt $APT_OPTS remove -y --purge $PURGE
    check_exit_status

    echo
    echo "** Remove unused config files **"
    sudo deborphan -n --find-config | xargs sudo apt-get -y --purge autoremove >> "$LOGFILE" 2>&1
    echo "$(date "+%T") : - Remove unused config files" >> "$LOGFILE" 2>&1
    check_exit_status
    echo
    echo "** Clear local repository of retrieved package files **"
    echo "$(date "+%T") : - Clear local repository of retrieved package files" >> "$LOGFILE" 2>&1
    sudo apt-get autoclean -y >> "$LOGFILE" 2>&1
    check_exit_status
    echo
    echo "** Uninstall unneeded packages and config files **"
    echo "$(date "+%T") : - Uninstall unneeded packages and config files" >> "$LOGFILE" 2>&1
    sudo apt-get autoremove --purge -y >> "$LOGFILE" 2>&1
    check_exit_status
    echo
    echo "** Clear out local repository of downloaded package files **"
    echo "$(date "+%T") : - Clear out local repository of downloaded package files" >> "$LOGFILE" 2>&1
    sudo apt-get clean all -y >> "$LOGFILE" 2>&1
    check_exit_status
    echo
    echo "** Completely purge previously installed packages and config files **"
    echo "$(date "+%T") : - Completely purge previously installed packages and config files" >> "$LOGFILE" 2>&1
    sudo apt-get purge $(dpkg -l | awk '/^rc/ { print $2 }') -y >> "$LOGFILE" 2>&1
    check_exit_status
    echo
    echo "** Clean downloaded temporary packages **"
    echo "$(date "+%T") : - Clean downloaded temporary packages" >> "$LOGFILE" 2>&1
    sudo apt-get -y autoclean
    sudo apt-get -y clean
    check_exit_status
    echo
    echo "** Scan for infected files and remove **"
    echo "$(date "+%T") : - Scan for infected files and remove" >> "$LOGFILE" 2>&1
    sudo clamscan -r --remove /home/ >> "$LOGFILE3"
    check_exit_status
    echo
    echo "** Scan for Root Kits **"
    echo "$(date "+%T") : - Scan for Scan for Root Kits" >> "$LOGFILE" 2>&1
    sudo rkhunter --check --sk >> "$LOGFILE2"
    check_exit_status
    echo
    echo "** Remove Log Files older than 32 Days **"
    echo "$(date "+%T") : - Remove Log Files older than 32 Days" >> "$LOGFILE" 2>&1
    find /home/logs/* -mtime +32 -exec rm -rf {} \; >> "$LOGFILE"
    check_exit_status
    echo
    echo "** Update database **"
    echo "$(date "+%T") : - Update database" >> "$LOGFILE" 2>&1
    sudo updatedb
    check_exit_status
    echo
    echo "** Update & Clean v6.0 Complete **"
    echo "$(date "+%T") : - Update & Clean v6.0 Script Complete" >> "$LOGFILE" 2>&1
}

# Main script execution
{
    echo
    echo "==========================================="
    echo "       -:: Update & Clean v6.0 ::-"
    echo "==========================================="
    echo
    echo "$(date "+%m/%d/%Y @ %T") : ******** Update & Clean Script Started! ********" >> "$LOGFILE"
    echo

    sudo /bin/updateandcleandaily
    sudo apt-get upgrade -y
    update
    housekeeping
    reboot
    leave

    echo "$(date "+%m/%d/%Y @ %T") : ******** Update & Clean Script Completed! ********" >> "$LOGFILE"
    echo
    echo "---------------------------"
    echo "          *fin*            "
    echo "---------------------------"
    echo
} 2>> "$ERRORLOG"
