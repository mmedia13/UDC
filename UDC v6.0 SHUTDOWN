#!/bin/bash

# Set log file paths
LOGFILE="/home/logs/UDC/UpdateNClean.log-$(date +%m.%d.%y)"
LOGFILE2="/home/logs/rkhunter/RKhunter.log-$(date +%m.%d.%y)"
LOGFILE3="/home/logs/clamav/ClamAV.log-$(date +%m.%d.%y)"
ERRORLOG="/home/logs/UDC/UDC-ERRORS/UDC-ERROR-Log-$(date +%m.%d.%y_%H.%M.%S)"

# Function to log errors
log_error() {
    echo "[ERROR] $(date "+%T"): $1" >> "$ERRORLOG"
}

# Function to check exit status of the previous command
check_exit_status() {
    if [ $? -eq 0 ]; then
        echo
        echo "          ^ Process Completed ^" >> "$LOGFILE"
        echo
    else
        echo
        echo "          ^ [ERROR] Process Failed! ^" >> "$LOGFILE"
        log_error "Process failed!"
        echo
    fi
}

# Function to perform the update process
update() {
    echo
    echo "** Update Time and Date **"
    echo "$(date "+%T") : - Update Time and Date" >> "$LOGFILE" 2>&1
    sudo ntpdate pool.ntp.org
    check_exit_status
    echo
    echo "** Update package lists for upgrades **"
    echo "$(date "+%T") : - Update package lists for upgrades" >> "$LOGFILE" 2>&1
    sudo apt-get update
    check_exit_status
    echo
    echo "** Upgrade System to new release (if Available) **"
    echo "$(date "+%T") : - Upgrade System to new release (if Available)" >> "$LOGFILE" 2>&1
    sudo do-release-upgrade -f DistUpgradeViewNonInteractive >> "$LOGFILE" 2>&1
    check_exit_status
    echo
    echo "** Updates packages and libraries **"
    echo "$(date "+%T") : - Updates packages and libraries" >> "$LOGFILE" 2>&1
    sudo apt full-upgrade -y
    check_exit_status
    echo
    echo "** Download and install packages as well as remove obsolete packages **"
    echo "$(date "+%T") : - Download and install packages as well as remove obsolete packages" >> "$LOGFILE" 2>&1
    sudo apt-get dist-upgrade -y
    check_exit_status
    echo
    echo "** Update Firefox Browser **"
    echo "$(date "+%T") : - Update Firefox Browser" >> "$LOGFILE" 2>&1
    sudo apt install firefox -y
    check_exit_status
    echo
    echo "** Finish configuration of partially installed packages **"
    echo "$(date "+%T") : - Finish configuration of partially installed packages" >> "$LOGFILE" 2>&1
    yes | sudo dpkg --configure -a
    check_exit_status
    echo
    echo "** Update ClamAV (if necessary) **"
    echo "$(date "+%T") : - Update ClamAV (if necessary)" >> "$LOGFILE" 2>&1
    # Check if ClamAV is installed
    if ! command -v clamscan &>/dev/null; then
        echo "ClamAV is not installed. Please install ClamAV first."
        exit 1
    fi

    # Get the current installed version of ClamAV
    current_version=$(clamscan --version | awk '{print $NF}')

    # Get the latest version available
    latest_version=$(wget -qO- https://www.clamav.net/downloads | grep -Eo 'ClamAV [0-9]+\.[0-9]+\.[0-9]+' | awk '{print $NF}')

    echo "Current version: $current_version"
    echo "Latest version: $latest_version"

    # Compare versions
    if [[ $current_version == $latest_version ]]; then
        echo "ClamAV is already up to date."
    else
        echo "Updating ClamAV to the latest version..."
        sudo apt-get update
        sudo apt-get install --only-upgrade clamav -y
        echo "ClamAV has been updated to the latest version."
    fi

    check_exit_status
    echo
    echo "** Update virus database **"
    echo "$(date "+%T") : - Update virus database" >> "$LOGFILE" 2>&1
    sudo /etc/init.d/clamav-freshclam stop
    sudo freshclam
    check_exit_status
    sudo /etc/init.d/clamav-freshclam start
    echo
    echo "** Update RKhunter **"
    echo "$(date "+%T") : - Update RKhunter" >> "$LOGFILE" 2>&1
    sudo rkhunter --update
    check_exit_status
    echo
    echo "** Update RKhunter database **"
    echo "$(date "+%T") : - Update RKhunter Database" >> "$LOGFILE" 2>&1
    sudo rkhunter --propupd
    check_exit_status
}

# Function to perform housekeeping tasks
housekeeping() {
    # ... existing code ...

    echo
    echo "** Update & Clean v5.9 Complete **"
    echo "$(date "+%T") : - Update & Clean v5.9 Script Complete" >> "$LOGFILE" 2>&1
}

# Function to update Pi-hole
update_pihole() {
    # ... existing code ...

    check_exit_status
}

# ... existing functions ...

leave() {
    echo "$(date "+%m/%d/%Y @ %T") : ******** Update & Clean Script Completed! ********" >> "$LOGFILE"
    echo
    echo "---------------------------"
    echo "          *fin*            "
    echo "---------------------------"
    echo
    sudo shutdown now  # Shut down the computer
    exit 0
}

# Main script execution
{
    # ... existing code ...

    update
    housekeeping
    update_pihole
    update_tailscale
    update_technitium_dns
    reboot
    leave

    echo "$(date "+%m/%d/%Y @ %T") : ******** Update & Clean Script Completed! ********" >> "$LOGFILE"
    echo
    echo "---------------------------"
    echo "          *fin*            "
    echo "---------------------------"
    echo
} 2>> "$ERRORLOG"
